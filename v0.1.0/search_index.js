var documenterSearchIndex = {"docs":
[{"location":"portability/#How-to-make-your-data-portable?","page":"Portability","title":"How to make your data portable?","text":"","category":"section"},{"location":"portability/","page":"Portability","title":"Portability","text":"After an equation-of-state-fitting, for instance, you want to save the returned EquationsOfStateOfSolids to share with a colleague or for future use. Julia provides several ways to do this. Below I will list one recommended way: saving it to a JLD format by JLD2.jl package.","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"JLD is a specific \"dialect\" of HDF5, a cross-platform, multi-language data storage format most frequently used for scientific data.","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"Install JLD2.jl and  FileIO.jl packages.\njulia> using Pkg\n\njulia> Pkg.add(\"FileIO\"); Pkg.add(\"JLD2\")\nCreate some EquationsOfStateOfSolidss:\njulia> using EquationsOfStateOfSolids.Collections, Unitful, UnitfulAtomic\n\njulia> m = Murnaghan(224.501825, 0.00060479524074699499, 3.723835, -323.417686)\nMurnaghan{Float64}(224.501825, 0.000604795240746995, 3.723835, -323.417686)\n\njulia> bm = BirchMurnaghan3rd(224.4445656763778u\"bohr^3\", 9.194980249913018u\"GPa\", 3.7403684211716297, -161.70885710742223u\"hartree\")\nBirchMurnaghan3rd{Quantity{Float64,D,U} where U where D}(224.4445656763778 a₀^3, 9.194980249913018 GPa, 3.7403684211716297, -161.70885710742223 Eₕ)\nSave them to file \"eos.jld2\":\njulia> using JLD2, FileIO\n\njulia> @save \"/some/path/eos.jld2\" m bm\nOn another computer, or some days later, load them into REPL:\njulia> using EquationsOfStateOfSolids.Collections, Unitful, UnitfulAtomic\n\njulia> @load \"/some/path/eos.jld2\" m bm\nNow variables m and bm represent the orginal Parameterss:\njulia> m.b0\n0.000604795240746995\n\njulia> m.bp0\n3.723835\n\njulia> bm.v0\n224.4445656763778 a₀^3\n\njulia> bm.b0\n9.194980249913018 GPa","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"For more details on the JLD format, please refer to JLD.jl's doc, JLD2.jl's doc or this discussion.","category":"page"},{"location":"interoperability/#How-to-use-EquationsOfStateOfSolids-in-Python?","page":"Interoperability","title":"How to use EquationsOfStateOfSolids in Python?","text":"","category":"section"},{"location":"interoperability/","page":"Interoperability","title":"Interoperability","text":"It may be attempting for Pythonistas to use this package in Python, without writing too much code. Luckily, Julia provides such a feature.","category":"page"},{"location":"interoperability/","page":"Interoperability","title":"Interoperability","text":"First, install PyCall.jl, following their instructions. Notice on macOS, that if you want to install Python from pyenv, you may need to run\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.6.9\nin terminal to install your python, or else Julia will throw an\nImportError: No module named site\nSee this issue and another issue for details.\nInstall PyJulia in Python. Please see its official tutorial for instructions.\nOpen a (an) Python (IPython) session, start playing!\nIn [1]: from julia import Unitful\n\nIn [2]: from julia.EquationsOfStateOfSolids.Collections import *\n\nIn [3]: from julia.EquationsOfStateOfSolids.Fitting import *\n\nIn [4]: Murnaghan(1, 2, 3.0, 4)\nOut[4]: <PyCall.jlwrap EquationsOfStateOfSolids.Collections.Murnaghan{Float64}(1.0, 2.0, 3.0, 4.0)>\n\nIn [5]: result = nonlinfit(\n   ...:     PressureEos(BirchMurnaghan3rd(1, 2, 3.0, 0)),\n   ...:     [1, 2, 3, 4, 5],\n   ...:     [5, 6, 9, 8, 7],\n   ...: )\n\nIn [6]: result.v0, result.b0, result.bp0\nOut[6]: (1.1024687826913997, 29.308616965851673, 12.689089874230556)\n\nIn [7]: from julia import Main\n\nIn [8]: volumes = Main.eval(\"data[:, 1] .* UnitfulAtomic.bohr^3\")\n\nIn [9]: energies = Main.eval(\"data[:, 2] .* UnitfulAtomic.Ry\")\nwhere data is copied from Julia:\nIn [1]: data = Main.eval(\"\"\"\n   ...:    [\n   ...:        159.9086 -323.4078898\n                   ⋮          ⋮\n   ...:        319.8173 -323.4105393\n   ...:    ]\n   ...:    \"\"\"\n   ...: )","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Pages = [\"installation.md\"]\nDepth = 5","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install this package, first, you need to install a julia executable from its official website. Version v1.0.0 and above is required. This package may not work on v0.7 and below.","category":"page"},{"location":"installation/#Installing-Julia","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"installation/#on-macOS","page":"Installation","title":"on macOS","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you are using a Mac, and have Homebrew installed, open Terminal.app and type:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"brew cask install julia","category":"page"},{"location":"installation/#on-Linux","page":"Installation","title":"on Linux","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"On Linux, the best way to install Julia is to use the Generic Linux Binaries. The JILL script does this for you. Just run","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"bash -ci \"$(curl -fsSL https://raw.githubusercontent.com/abelsiqueira/jill/master/jill.sh)\"","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"installs Julia into $HOME/.local/bin. This script also has a Python version, JILL.py. It can also be used on macOS.","category":"page"},{"location":"installation/#Installing-the-package","page":"Installation","title":"Installing the package","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Open Terminal.app, and type julia to start a Julia session.\nRun\njulia> using Pkg; Pkg.update()\n\njulia> Pkg.add(\"Unitful\")\n\njulia> Pkg.add(\"UnitfulAtomic\")\n\njulia> Pkg.add(\"EquationsOfStateOfSolids\")\nand wait for its finish.\nRun\njulia> using EquationsOfStateOfSolids.Collections, EquationsOfStateOfSolids.Find, EquationsOfStateOfSolids.Fitting, Unitful, UnitfulAtomic\nand have fun!\nWhile using, please keep this Julia session alive. Restarting may recompile the package and cost some time.","category":"page"},{"location":"installation/#Reinstall","page":"Installation","title":"Reinstall","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"In the same Julia session, run\njulia> Pkg.rm(\"EquationsOfStateOfSolids\"); Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and repeat the above steps.","category":"page"},{"location":"plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Package EquationOfStateRecipes.jl provides some default themes for plotting an EquationOfStateOfSolids. First, try to install the Plots.jl package by","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"julia> using Pkg\n\njulia> Pkg.add(\"Plots\")\n\njulia> using Plots","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Then install EquationOfStateRecipes.jl with","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"julia> pkg\"add https://github.com/MineralsCloud/EquationOfStateRecipes.jl.git\"\n\njulia> using EquationOfStateRecipes","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Finally, load EquationsOfStateOfSolids.jl and build your own EquationOfStateOfSolids:","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"julia> using EquationsOfStateOfSolids.Collections\n\njulia> eos = EnergyEos(Murnaghan(224.501825u\"bohr^3\", 8.896845u\"GPa\", 3.723835, -323.417686u\"Ry\"));\n\njulia> plot(eos)\n\njulia> plot!(eos, (0.8:0.01:1.2) * eos.param.v0)\n\njulia> scatter!(eos, (0.5:0.1:1) * eos.param.v0)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"(Image: fig)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Have fun!","category":"page"},{"location":"api/fitting/#Nonlinear-fitting","page":"Fitting","title":"Nonlinear fitting","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"CurrentModule = EquationsOfStateOfSolids.Fitting","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"From Ref. 1,","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"The equations of state depend nonlinearly of a collection of parameters, E_0, V_0, B_0, B_0, ..., that represent physical properties of the solid at equilibrium and can, in principle, be obtained expermentally by independent methods. The use of a given analytical EOS may have significant influence on the results obtained, particularly because the parameters are far from being independent. The number of parameters has to be considered in comparing the goodness of fit of functional forms with different analytical flexibility. The possibility of using too many parameters, beyond what is physically justified by the information contained in the experimental data, is a serious aspect that deserves consideration.","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"In EquationsOfStateOfSolids, the nonlinear fitting is currently implemented by LsqFit, a small library that provides basic least-squares fitting in pure Julia. It only utilizes the Levenberg-Marquardt algorithm for non-linear fitting. See its documentation for more information.","category":"page"},{"location":"api/fitting/#Usage","page":"Fitting","title":"Usage","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"We provide API nonlinfit currently.","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"using EquationsOfStateOfSolids.Collections\nusing EquationsOfStateOfSolids.Fitting\n\nvolumes = [\n    25.987454833,\n    26.9045702104,\n    27.8430241908,\n    28.8029649591,\n    29.7848370694,\n    30.7887887064,\n    31.814968055,\n    32.8638196693,\n    33.9353435494,\n    35.0299842495,\n    36.1477417695,\n    37.2892088485,\n    38.4543854865,\n    39.6437162376,\n    40.857201102,\n    42.095136449,\n    43.3579668329,\n    44.6456922537,\n    45.9587572656,\n    47.2973100535,\n    48.6614988019,\n    50.0517680652,\n    51.4682660281,\n    52.9112890601,\n    54.3808371612,\n    55.8775030703,\n    57.4014349722,\n    58.9526328669,\n];\nenergies = [\n    -7.63622156576,\n    -8.16831294894,\n    -8.63871612686,\n    -9.05181213218,\n    -9.41170988374,\n    -9.72238224345,\n    -9.98744832526,\n    -10.210309552,\n    -10.3943401353,\n    -10.5427238068,\n    -10.6584266073,\n    -10.7442240979,\n    -10.8027285713,\n    -10.8363890521,\n    -10.8474912964,\n    -10.838157792,\n    -10.8103477586,\n    -10.7659387815,\n    -10.7066179666,\n    -10.6339907853,\n    -10.5495538639,\n    -10.4546677714,\n    -10.3506386542,\n    -10.2386366017,\n    -10.1197772808,\n    -9.99504030111,\n    -9.86535084973,\n    -9.73155247952,\n];\n\njulia> nonlinfit(EnergyEos(BirchMurnaghan3rd(40, 0.5, 4, 0)), volumes, energies)\nBirchMurnaghan3rd{Float64}(40.989265727925826, 0.5369258245608038, 4.1786442319302015, -10.842803908298968)\n\njulia> nonlinfit(EnergyEos(Murnaghan(41, 0.5, 4, 0)), volumes, energies)\nMurnaghan{Float64}(41.13757924894751, 0.5144967655882123, 3.912386317519504, -10.836794511015869)\n\njulia> nonlinfit(EnergyEos(PoirierTarantola3rd(41, 0.5, 4, 0)), volumes, energies)\nPoirierTarantola3rd{Float64}(40.86770643567383, 0.5667729960008705, 4.331688934942696, -10.851486685029547)\n\njulia> nonlinfit(EnergyEos(Vinet(41, 0.5, 4, 0)), volumes, energies)\nVinet{Float64}(40.91687567368755, 0.5493839427734198, 4.30519294991197, -10.846160810968053)","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"Then 4 different equations of state will be fitted.","category":"page"},{"location":"api/fitting/#Public-interfaces","page":"Fitting","title":"Public interfaces","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"linfit\nnonlinfit","category":"page"},{"location":"api/fitting/#EquationsOfStateOfSolids.Fitting.linfit","page":"Fitting","title":"EquationsOfStateOfSolids.Fitting.linfit","text":"linfit(eos::EnergyEos{<:FiniteStrainParameters}, volumes, energies; kwargs...)\n\nKeyword Arguments\n\nmaxiter::Integer=1000: .\nconv_thr::AbstractFloat=1e-12: .\nroot_thr::AbstractFloat=1e-20: .\nverbose::Bool=false: .\n\nnote: Note\nIf you want to fit with BigFloat data, you need to install GenericSVD.jl and using GenericSVD before fittting!\n\n\n\n\n\n","category":"function"},{"location":"api/fitting/#EquationsOfStateOfSolids.Fitting.nonlinfit","page":"Fitting","title":"EquationsOfStateOfSolids.Fitting.nonlinfit","text":"nonlinfit(eos::EquationOfStateOfSolids, xs, ys; kwargs...)\n\nKeyword Arguments\n\nxtol::AbstractFloat=1e-16: .\ngtol::AbstractFloat=1e-16: .\nmaxiter::Integer=1000: .\nmin_step_quality::AbstractFloat=1e-16: .\ngood_step_quality::AbstractFloat=0.75: .\nverbose::Bool=false: .\n\n\n\n\n\n","category":"function"},{"location":"api/fitting/#References","page":"Fitting","title":"References","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"A. Otero-De-La-Roza, V. Luaña, Computer Physics Communications. 182, 1708–1720 (2011), doi:10.1016/j.cpc.2011.04.016.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EquationsOfStateOfSolids","category":"page"},{"location":"#EquationsOfStateOfSolids","page":"Home","title":"EquationsOfStateOfSolids","text":"","category":"section"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Calculate energy, pressure, and bulk modulus of an EOS Parameters on a (an) volume (array of volumes).\nFit an EquationOfState on a series of volumes using least-squares fitting method.\nFit an EquationOfState on a series of volumes linearly.\nFind the corresponding volume of an EOS Parameters given an (a) energy, pressure, and bulk modulus.\nHandle unit conversion automatically in the above features, take any unit.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"portability.md\",\n    \"interoperability.md\",\n    \"plotting.md\",\n    \"faq.md\",\n    \"api/collections.md\",\n    \"api/fitting.md\",\n]\nDepth = 3","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EquationsOfStateOfSolids]","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/#How-to-make-a-Vector-from-a-Parameters?","page":"FAQ","title":"How to make a Vector from a Parameters?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"A suggested way is to use the IterTools.fieldvalues function:","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"julia> using IterTools\n\njulia> eos = BirchMurnaghan4th(1, 2.0, 3, 4)\nBirchMurnaghan4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> collect(fieldvalues(eos))\n5-element Array{Float64,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n 0.0","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"It is lazy and fast.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Or to write a non-lazy version of fieldvalues manually:","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"julia> fieldvalues(eos::EquationOfState) = [getfield(eos, i) for i in 1:nfields(eos)]\nfieldvalues (generic function with 1 method)\n\njulia> fieldvalues(eos)\n5-element Array{Float64,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n 0.0","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"It is slower than IterTools.fieldvalues. Use it with care.","category":"page"},{"location":"faq/#linfit-does-not-work-with-BigFloat?","page":"FAQ","title":"linfit does not work with BigFloat?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"LinearAlgebra by default does not support SVD for matrices with BigFloat elements. You need to install GenericSVD.jl first then using GenericSVD. And then it should work.","category":"page"},{"location":"api/collections/#Collections","page":"Collections","title":"Collections","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"CurrentModule = EquationsOfStateOfSolids.Collections","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The current Parameterss contain","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Parameters\n├─ AntonSchmidt\n├─ FiniteStrainParameters\n│  ├─ BirchMurnaghan\n│  │  ├─ BirchMurnaghan2nd\n│  │  ├─ BirchMurnaghan3rd\n│  │  └─ BirchMurnaghan4th\n│  └─ PoirierTarantola\n│     ├─ PoirierTarantola2nd\n│     ├─ PoirierTarantola3rd\n│     └─ PoirierTarantola4th\n├─ Holzapfel\n├─ Murnaghan\n└─ Vinet","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Here the leaves of the type tree are concrete types and can be constructed.","category":"page"},{"location":"api/collections/#Usage","page":"Collections","title":"Usage","text":"","category":"section"},{"location":"api/collections/#Construct-a-Parameters-instance","page":"Collections","title":"Construct a Parameters instance","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"We will use BirchMurnaghan3rd as an example.","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"A BirchMurnaghan3rd can be constructed from scratch, as shown above. It can also be constructed from an existing BirchMurnaghan3rd, with Setfield.jl @set! macro:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"julia> using Setfield\n\njulia> eos = Murnaghan(1, 2, 3.0)\nMurnaghan{Float64}(1.0, 2.0, 3.0, 0.0)\n\njulia> @set! eos.v0 = 4\nMurnaghan{Float64}(4.0, 2.0, 3.0, 0.0)\n\njulia> eos\nMurnaghan{Float64}(4.0, 2.0, 3.0, 0.0)","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"To modify multiple fields (say, :v0, :b′0, :b′′0, :e0) at a time, use @batchlens from Kaleido.jl:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"julia> using Setfield, Kaleido\n\njulia> lens = @batchlens(begin\n           _.v0\n           _.b′0\n           _.b″0\n           _.e0\n       end)\nIndexBatchLens(:v0, :b′0, :b″0, :e0)\n\njulia> eos = BirchMurnaghan4th(1, 2.0, 3, 4)\nBirchMurnaghan4th{Float64}(1.0, 2.0, 3.0, 4.0, 0.0)\n\njulia> set(eos, lens, (5, 6, 7, 8))\nBirchMurnaghan4th{Float64}(5.0, 2.0, 6.0, 7.0, 8.0)","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Users can access BirchMurnaghan3rd's elements by \"dot notation\":","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"julia> eos = BirchMurnaghan3rd(1, 2, 3, 4.0)\n4-element BirchMurnaghan3rd{Float64}:\n 1.0\n 2.0\n 3.0\n 4.0\n\njulia> eos.v0\n1.0","category":"page"},{"location":"api/collections/#Evaluate-energy","page":"Collections","title":"Evaluate energy","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The E(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan:\nE(V) = E_0+K_0 V_0leftfrac1K_0^primeleft(K_0^prime-1right)left(fracVV_0right)^1-K_0^prime+frac1K_0^prime fracVV_0-frac1K_0^prime-1right\nBirchMurnaghan2nd:\nE(V) = E_0 + frac98 B_0 V_0 left(left( V  V_0 right)^-2  3-1right)^2\nBirchMurnaghan3rd:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nwhere x = V / V_0, and f = \\frac{ 1 }{ 2 } \\bigg[ \\bigg( \\frac{ V_0 }{ V } \\bigg)^{2/3} - 1 \\bigg].\nBirchMurnaghan4th:\nE(V) = E_0+frac38 V_0 B_0 f^2leftleft(9 H-63 B_0^prime+143right) f^2+12left(B_0^prime-4right) f+12right\nwhere H = B_0 B_0'' + (B_0')^2.\nPoirierTarantola2nd:\nE(V) = E_0+frac12 B_0 V_0 ln ^2 x\nPoirierTarantola3rd:\nE(V) = E_0+frac16 B_0 V_0 ln ^2 xleftleft(B_0^prime+2right) ln x+3right\nPoirierTarantola4th:\nE(V) = E_0+frac124 B_0 V_0 ln ^2 xleftleft(H+3 B_0^prime+3right) ln ^2 xright left+4left(B_0^prime+2right) ln x+12right\nwhere H = B_0 B_0'' + (B_0')^2.\nVinet:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nAntonSchmidt:\nE(V)=fracbeta V_0n+1left(fracVV_0right)^n+1leftln left(fracVV_0right)-frac1n+1right+E_infty","category":"page"},{"location":"api/collections/#Evaluate-pressure","page":"Collections","title":"Evaluate pressure","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The P(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan:\nP(V) = fracB_0B_0^primeleftleft(fracV_0Vright)^B_0^prime-1right\nBirchMurnaghan2nd:\nP(V) = frac32 B_0left(x^-7  3-x^-5  3right)\nBirchMurnaghan3rd:\nP(V) = frac38 B_0 fracx^2  3-1x^10  3left3 B_0^prime x-16 x-3 x^1  3left(B_0^prime-4right)right\nBirchMurnaghan4th:\nP(V) = frac12 B_0(2 f+1)^5  2leftleft(9 H-63 B_0^prime+143right) f^2rightleft+9left(B_0^prime-4right) f+6right\nPoirierTarantola2nd:\nP(V) = -fracB_0x ln x\nPoirierTarantola3rd:\nP(V) = -fracB_0 ln x2 xleftleft(B_0^prime+2right) ln x+2right\nPoirierTarantola4th:\nP(V) = -fracB_0 ln x6 xleftleft(H+3 B_0^prime+3right) ln ^2 x+3left(B_0^prime+6right) ln x+6right\nVinet:\nP(V) = 3 B_0 frac1-etaeta^2 exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nP(V) = -betaleft(fracVV_0right)^n ln left(fracVV_0right)","category":"page"},{"location":"api/collections/#Evaluate-bulk-modulus","page":"Collections","title":"Evaluate bulk modulus","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The B(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"BirchMurnaghan2nd:\nB(V) = B_0(7 f+1)(2 f+1)^5  2\nBirchMurnaghan3rd:\nB(V) = fracB_08 x^10  3leftx^5  3left(15 B_0^prime-80right)-xleft(42 B_0^prime-196right)rightleft+27 x^1  3left(B_0^prime-4right)right\nBirchMurnaghan4th:\nB(V) = frac16 B_0(2 f+1)^5  2leftleft(99 H-693 B_0^prime+1573right) f^3rightleft+left(27 H-108 B_0^prime+105right) f^2+6left(3 B_0^prime-5right) f+6right\nPoirierTarantola2nd:\nB(V) = fracB_0x(1-ln x)\nPoirierTarantola3rd:\nB(V) = -fracB_02 xleftleft(B_0^prime+2right) ln x(ln x-1)-2right\nPoirierTarantola4th:\nB(V) = -fracB_06 xleftleft(H+3 B_0^prime+3right) ln ^3 x-3left(H+2 B_0^prime+1right) ln ^2 xrightleft-6left(B_0^prime+1right) ln x-6right\nVinet:\nB(V) = -fracB_02 eta^2left3 eta(eta-1)left(B_0^prime-1right)+2(eta-2)righttimes exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nB(V) = betaleft(fracVV_0right)^nleft1+n ln fracVV_0right","category":"page"},{"location":"api/collections/#Public-interfaces","page":"Collections","title":"Public interfaces","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan\nBirchMurnaghan\nBirchMurnaghan2nd\nBirchMurnaghan3rd\nBirchMurnaghan4th\nPoirierTarantola\nPoirierTarantola2nd\nPoirierTarantola3rd\nPoirierTarantola4th\nVinet\nAntonSchmidt\nHolzapfel\nEnergyEos\nPressureEos\nBulkModulusEos\nEulerianStrain\nLagrangianStrain\nNaturalStrain\nInfinitesimalStrain\ngetparam\norderof\nstraintype\nstrain2volume\nvolume2strain\natomic_number","category":"page"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.Murnaghan","page":"Collections","title":"EquationsOfStateOfSolids.Collections.Murnaghan","text":"Murnaghan(v0, b0, b′0, e0=zero(v0 * b0))\n\nCreate a Murnaghan equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.BirchMurnaghan","page":"Collections","title":"EquationsOfStateOfSolids.Collections.BirchMurnaghan","text":"BirchMurnaghan(args...)\n\nConstruct a BirchMurnaghan based on the length of arguments, where e0 must be provided.\n\nSee also: BirchMurnaghan2nd, BirchMurnaghan3rd, BirchMurnaghan4th\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.BirchMurnaghan2nd","page":"Collections","title":"EquationsOfStateOfSolids.Collections.BirchMurnaghan2nd","text":"BirchMurnaghan2nd(v0, b0, e0=zero(v0 * b0))\n\nCreate a Birch–Murnaghan second order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.BirchMurnaghan3rd","page":"Collections","title":"EquationsOfStateOfSolids.Collections.BirchMurnaghan3rd","text":"BirchMurnaghan3rd(v0, b0, b′0, e0=zero(v0 * b0))\n\nCreate a Birch–Murnaghan third order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.BirchMurnaghan4th","page":"Collections","title":"EquationsOfStateOfSolids.Collections.BirchMurnaghan4th","text":"BirchMurnaghan4th(v0, b0, b′0, b″0, e0=zero(v0 * b0))\n\nCreate a Birch–Murnaghan fourth order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\nb″0: the second-order pressure-derivative bulk modulus of solid at zero pressure. \"″\" can be typed by \\pprime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.PoirierTarantola","page":"Collections","title":"EquationsOfStateOfSolids.Collections.PoirierTarantola","text":"PoirierTarantola(args...)\n\nConstruct a PoirierTarantola based on the length of arguments, where e0 must be provided.\n\nSee also: PoirierTarantola2nd, PoirierTarantola3rd, PoirierTarantola4th\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.PoirierTarantola2nd","page":"Collections","title":"EquationsOfStateOfSolids.Collections.PoirierTarantola2nd","text":"PoirierTarantola2nd(v0, b0, e0=zero(v0 * b0))\n\nCreate a Poirier–Tarantola second order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.PoirierTarantola3rd","page":"Collections","title":"EquationsOfStateOfSolids.Collections.PoirierTarantola3rd","text":"PoirierTarantola3rd(v0, b0, b′0, e0=zero(v0 * b0))\n\nCreate a Poirier–Tarantola third order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.PoirierTarantola4th","page":"Collections","title":"EquationsOfStateOfSolids.Collections.PoirierTarantola4th","text":"PoirierTarantola4th(v0, b0, b′0, b″0, e0=zero(v0 * b0))\n\nCreate a Poirier–Tarantola fourth order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\nb″0: the second-order pressure-derivative bulk modulus of solid at zero pressure. \"″\" can be typed by \\pprime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.Vinet","page":"Collections","title":"EquationsOfStateOfSolids.Collections.Vinet","text":"Vinet(v0, b0, b′0, e0=zero(v0 * b0))\n\nCreate a Vinet equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nb′0: the first-order pressure-derivative bulk modulus of solid at zero pressure. \"′\" can be typed by \\prime<tab>.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.EnergyEos","page":"Collections","title":"EquationsOfStateOfSolids.Collections.EnergyEos","text":"(eos::EnergyEos{<:PoirierTarantola3rd})(v)\n\nEvaluate a Poirier–Tarantola energy EOS on volume v.\n\nE(V) = E_0 + frac B_0 V_02left ln left( fracV_0Vright) right^2 + fracB_0 V_06 left ln left(fracV_0V right) right^3 left(B_0^prime - 2 right)\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.PressureEos","page":"Collections","title":"EquationsOfStateOfSolids.Collections.PressureEos","text":"(eos::PressureEos{<:PoirierTarantola3rd})(v)\n\nEvaluate a Poirier–Tarantola pressure EOS on volume v.\n\nP(V) = B_0 fracV_0V leftln left( fracV_0V right) + fracleft( B_0^prime -2 right) 2 left ln left( fracV_0V right) right^2right\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.getparam","page":"Collections","title":"EquationsOfStateOfSolids.Collections.getparam","text":"getparam(eos::EquationOfStateOfSolids)\n\nGet the Parameters from an EquationOfStateOfSolids.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.orderof","page":"Collections","title":"EquationsOfStateOfSolids.Collections.orderof","text":"orderof(x::FiniteStrainParameters)\n\nReturn the order of a FiniteStrainParameters.\n\nExamples\n\njulia> orderof(BirchMurnaghan3rd(40, 0.5, 4, 0)) == 3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.strain2volume","page":"Collections","title":"EquationsOfStateOfSolids.Collections.strain2volume","text":"strain2volume(::EulerianStrain, v0)\nstrain2volume(::LagrangianStrain, v0)\nstrain2volume(::NaturalStrain, v0)\nstrain2volume(::InfinitesimalStrain, v0)\n\nReturn a function of f that calculates the corresponding volume from v0.\n\ninfo: Info\nSee the formulae on Ref. 1 Table 3.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#EquationsOfStateOfSolids.Collections.volume2strain","page":"Collections","title":"EquationsOfStateOfSolids.Collections.volume2strain","text":"volume2strain(::EulerianStrain, v0)\nvolume2strain(::LagrangianStrain, v0)\nvolume2strain(::NaturalStrain, v0)\nvolume2strain(::InfinitesimalStrain, v0)\n\nReturn a function of v that calculates the FiniteStrain from v0.\n\ninfo: Info\nSee the formulae on Ref. 1 Table 3.\n\n\n\n\n\n","category":"function"}]
}
