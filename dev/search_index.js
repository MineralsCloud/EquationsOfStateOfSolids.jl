var documenterSearchIndex = {"docs":
[{"location":"portability/#How-to-make-your-data-portable?","page":"Portability","title":"How to make your data portable?","text":"","category":"section"},{"location":"portability/","page":"Portability","title":"Portability","text":"After an equation-of-state-fitting, for instance, you want to save the data to share with a colleague or for future use. Julia provides several ways to do this. Below I will list one recommended way: saving it to a JLD format by JLD2.jl package.","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"JLD is a specific \"dialect\" of HDF5, a cross-platform, multi-language data storage format most frequently used for scientific data.","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"Install JLD2.jl and FileIO.jl packages.\nusing Pkg\nPkg.add(\"FileIO\")\nPkg.add(\"JLD2\")\nCreate some EquationsOfStateOfSolidss:\nusing EquationsOfStateOfSolids, Unitful, UnitfulAtomic\nm = Murnaghan(224.501825, 0.00060479524074699499, 3.723835, -323.417686)\nbm = BirchMurnaghan3rd(224.4445656763778u\"bohr^3\", 9.194980249913018u\"GPa\", 3.7403684211716297, -161.70885710742223u\"hartree\")\nSave them to file \"eos.jld2\":\nusing JLD2, FileIO\n@save \"eos.jld2\" m bm\nOn another computer, or some days later, load them into REPL:\nusing EquationsOfStateOfSolids, Unitful, UnitfulAtomic\n@load \"eos.jld2\" m bm\nNow variables m and bm represent the original Parameters:\nm.b0\nm.bâ€²0\nbm.v0\nbm.b0","category":"page"},{"location":"portability/","page":"Portability","title":"Portability","text":"For more details on the JLD format, please refer to JLD.jl's doc, JLD2.jl's doc or this discussion.","category":"page"},{"location":"installation/#installation","page":"Installation guide","title":"Installation guide","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Here are the installation instructions for package EquationsOfStateOfSolids. If you have trouble installing it, please refer to our Troubleshooting page for more information.","category":"page"},{"location":"installation/#Install-Julia","page":"Installation guide","title":"Install Julia","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"First, you should install Julia. We recommend downloading it from its official website. Please follow the detailed instructions on its website if you have to build Julia from source. Some computing centers provide preinstalled Julia. Please contact your administrator for more information in that case. Here's some additional information on how to set up Julia on HPC systems.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you have Homebrew installed, open Terminal.app and type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"brew install julia","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"to install it as a formula.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you are also using macOS and want to install it as a prebuilt binary app, type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"brew install --cask julia","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"instead.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you want to install multiple Julia versions in the same operating system, a recommended way is to use a version manager such as juliaup. First, install juliaup. Then, run","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"juliaup add release\njuliaup default release","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"to configure the julia command to start the latest stable version of Julia (this is also the default value).","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"There is a short video introduction to juliaup made by its authors.","category":"page"},{"location":"installation/#Which-version-should-I-pick?","page":"Installation guide","title":"Which version should I pick?","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"You can install the \"Current stable release\" or the \"Long-term support (LTS) release\".","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"The \"Current stable release\" is the latest release of Julia. It has access to newer features, and is likely faster.\nThe \"Long-term support release\" is an older version of Julia that has continued to receive bug and security fixes. However, it may not have the latest features or performance improvements.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"For most users, you should install the \"Current stable release\", and whenever Julia releases a new version of the current stable release, you should update your version of Julia. Note that any code you write on one version of the current stable release will continue to work on all subsequent releases.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"For users in restricted software environments (e.g., your enterprise IT controls what software you can install), you may be better off installing the long-term support release because you will not have to update Julia as frequently.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Versions higher than v1.3, especially v1.6, are strongly recommended. This package may not work on v1.0 and below. Since the Julia team has set v1.6 as the LTS release, we will gradually drop support for versions below v1.6.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Julia and Julia packages support multiple operating systems and CPU architectures; check this table to see if it can be installed on your machine. For Mac computers with M-series processors, this package and its dependencies may not work. Please install the Intel-compatible version of Julia (for macOS x86-64) if any platform-related error occurs.","category":"page"},{"location":"installation/#Install-EquationsOfStateOfSolids","page":"Installation guide","title":"Install EquationsOfStateOfSolids","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Open Terminal.app, and type julia to start an interactive session (known as the REPL).\nRun the following commands and wait for them to finish:\njulia> using Pkg\n\njulia> Pkg.update()\n\njulia> Pkg.add(\"EquationsOfStateOfSolids\")\nRun\njulia> using EquationsOfStateOfSolids\nand have fun!\nWhile using, please keep this Julia session alive. Restarting might cost some time.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you want to install the latest in-development (probably buggy) version of EquationsOfStateOfSolids, type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update()\npkg\"add https://github.com/MineralsCloud/EquationsOfStateOfSolids.jl\"","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the second step above.","category":"page"},{"location":"installation/#Update-EquationsOfStateOfSolids","page":"Installation guide","title":"Update EquationsOfStateOfSolids","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Please watch our GitHub repository for new releases. Once we release a new version, you can update EquationsOfStateOfSolids by typing","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update(\"EquationsOfStateOfSolids\")\nPkg.gc()","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the Julia REPL.","category":"page"},{"location":"installation/#Uninstall-and-reinstall-EquationsOfStateOfSolids","page":"Installation guide","title":"Uninstall and reinstall EquationsOfStateOfSolids","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Sometimes errors may occur if the package is not properly installed. In this case, you may want to uninstall and reinstall the package. Here is how to do that:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To uninstall, in a Julia session, run\njulia> using Pkg\n\njulia> Pkg.rm(\"EquationsOfStateOfSolids\")\n\njulia> Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and reinstall EquationsOfStateOfSolids.","category":"page"},{"location":"developers/style/#style","page":"Style Guide","title":"Style guide and design principles","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Pages = [\"style.md\"]","category":"page"},{"location":"developers/style/#Style-guide","page":"Style Guide","title":"Style guide","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"This section describes the coding style rules that apply to our code and that we recommend you to use it also.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"In some cases, our style guide diverges from the Julia style guide (Please read it!). All such cases will be explicitly noted and justified.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Our style guide adopts many recommendations from the Blue style guide.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Please read the Blue style guide before contributing to this package. If not following, your pull requests may not be accepted.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"info: Info\nThe style guide is always a work in progress, and not all EquationsOfStateOfSolids code follows the rules. When modifying EquationsOfStateOfSolids, please fix the style violations of the surrounding code (i.e., leave the code tidier than when you started). If large changes are needed, consider separating them into another pull request.","category":"page"},{"location":"developers/style/#formatter","page":"Style Guide","title":"Run JuliaFormatter","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"EquationsOfStateOfSolids uses JuliaFormatter as an auto-formatting tool.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"We use the options contained in .JuliaFormatter.toml.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"To format your code, cd to the EquationsOfStateOfSolids directory, then run:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"using Pkg\nPkg.add(\"JuliaFormatter\")\nusing JuliaFormatter: format\nformat(\"docs\")\nformat(\"src\")\nformat(\"test\")","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"info: Info\nA continuous integration check verifies that all PRs made to EquationsOfStateOfSolids have passed the formatter.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"The following sections outline extra style guide points that are not fixed automatically by JuliaFormatter.","category":"page"},{"location":"developers/style/#Use-the-Julia-extension-for-Visual-Studio-Code","page":"Style Guide","title":"Use the Julia extension for Visual Studio Code","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Please use VS Code with the Julia extension to edit, format, and test your code. We do not recommend using other editors to edit your code for the time being.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"This extension already has JuliaFormatter integrated. So to format your code, follow the steps listed here.","category":"page"},{"location":"developers/style/#Design-principles","page":"Style Guide","title":"Design principles","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"We adopt some SciML design guidelines here. Please read it before contributing!","category":"page"},{"location":"developers/style/#Consistency-vs-Adherence","page":"Style Guide","title":"Consistency vs Adherence","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"According to PEP8:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"But most importantly: know when to be inconsistent â€“ sometimes the style guide just doesn't apply. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!","category":"page"},{"location":"developers/style/#Community-Contribution-Guidelines","page":"Style Guide","title":"Community Contribution Guidelines","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"For a comprehensive set of community contribution guidelines, refer to ColPrac. A relevant point to highlight PRs should do one thing. In the context of style, this means that PRs which update the style of a package's code should not be mixed with fundamental code contributions. This separation makes it easier to ensure that large style improvement are isolated from substantive (and potentially breaking) code changes.","category":"page"},{"location":"developers/style/#Open-source-contributions-are-allowed-to-start-small-and-grow-over-time","page":"Style Guide","title":"Open source contributions are allowed to start small and grow over time","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If the standard for code contributions is that every PR needs to support every possible input type that anyone can think of, the barrier would be too high for newcomers. Instead, the principle is to be as correct as possible to begin with, and grow the generic support over time. All recommended functionality should be tested, any known generality issues should be documented in an issue (and with a @test_broken test when possible). However, a function which is known to not be GPU-compatible is not grounds to block merging, rather it is an encouragement for a follow-up PR to improve the general type support!","category":"page"},{"location":"developers/style/#Generic-code-is-preferred-unless-code-is-known-to-be-specific","page":"Style Guide","title":"Generic code is preferred unless code is known to be specific","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"For example, the code:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"function f(A, B)\n    for i in 1:length(A)\n        A[i] = A[i] + B[i]\n    end\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"would not be preferred for two reasons. One is that it assumes A uses one-based indexing, which would fail in cases like OffsetArrays and FFTViews. Another issue is that it requires indexing, while not all array types support indexing (for example, CuArrays). A more generic compatible implementation of this function would be to use broadcast, for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"function f(A, B)\n    @. A = A + B\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"which would allow support for a wider variety of array types.","category":"page"},{"location":"developers/style/#Internal-types-should-match-the-types-used-by-users-when-possible","page":"Style Guide","title":"Internal types should match the types used by users when possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If f(A) takes the input of some collections and computes an output from those collections, then it should be expected that if the user gives A as an Array, the computation should be done via Arrays. If A was a CuArray, then it should be expected that the computation should be internally done using a CuArray (or appropriately error if not supported). For these reasons, constructing arrays via generic methods, like similar(A), is preferred when writing f instead of using non-generic constructors like Array(undef,size(A)) unless the function is documented as being non-generic.","category":"page"},{"location":"developers/style/#Trait-definition-and-adherence-to-generic-interface-is-preferred-when-possible","page":"Style Guide","title":"Trait definition and adherence to generic interface is preferred when possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Julia provides many interfaces, for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Iteration\nIndexing\nBroadcast","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Those interfaces should be followed when possible. For example, when defining broadcast overloads, one should implement a BroadcastStyle as suggested by the documentation instead of simply attempting to bypass the broadcast system via copyto! overloads.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"When interface functions are missing, these should be added to Base Julia or an interface package, like ArrayInterface.jl. Such traits should be declared and used when appropriate. For example, if a line of code requires mutation, the trait ArrayInterface.ismutable(A) should be checked before attempting to mutate, and informative error messages should be written to capture the immutable case (or, an alternative code which does not mutate should be given).","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"One example of this principle is demonstrated in the generation of Jacobian matrices. In many scientific applications, one may wish to generate a Jacobian cache from the user's input u0. A naive way to generate this Jacobian is J = similar(u0,length(u0),length(u0)). However, this will generate a Jacobian J such that J isa Matrix.","category":"page"},{"location":"developers/style/#Macros-should-be-limited-and-only-be-used-for-syntactic-sugar","page":"Style Guide","title":"Macros should be limited and only be used for syntactic sugar","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Macros define new syntax, and for this reason they tend to be less composable than other coding styles and require prior familiarity to be easily understood. One principle to keep in mind is, \"can the person reading the code easily picture what code is being generated?\". For example, a user of Soss.jl may not know what code is being generated by:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"@model (x, Î±) begin\n    Ïƒ ~ Exponential()\n    Î² ~ Normal()\n    y ~ For(x) do xj\n        Normal(Î± + Î² * xj, Ïƒ)\n    end\n    return y\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"and thus using such a macro as the interface is not preferred when possible. However, a macro like @muladd is trivial to picture on a code (it recursively transforms a*b + c to muladd(a,b,c) for more accuracy and efficiency), so using such a macro for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"julia> @macroexpand(@muladd k3 = f(t + c3 * dt, @. uprev + dt * (a031 * k1 + a032 * k2)))\n:(k3 = f((muladd)(c3, dt, t), (muladd).(dt, (muladd).(a032, k2, (*).(a031, k1)), uprev)))","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"is recommended. Some macros in this category are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"@inbounds\n@muladd\n@view\n@named\n@.\n@..","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Some performance macros, like @simd, @threads, or @turbo from LoopVectorization.jl, make an exception in that their generated code may be foreign to many users. However, they still are classified as appropriate uses as they are syntactic sugar since they do (or should) not change the behavior of the program in measurable ways other than performance.","category":"page"},{"location":"developers/style/#Errors-should-be-caught-as-high-as-possible,-and-error-messages-should-be-contextualized-for-newcomers","page":"Style Guide","title":"Errors should be caught as high as possible, and error messages should be contextualized for newcomers","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Whenever possible, defensive programming should be used to check for potential errors before they are encountered deeper within a package. For example, if one knows that f(u0,p) will error unless u0 is the size of p, this should be caught at the start of the function to throw a domain specific error, for example \"parameters and initial condition should be the same size\".","category":"page"},{"location":"developers/style/#Subpackaging-and-interface-packages-is-preferred-over-conditional-modules-via-Requires.jl","page":"Style Guide","title":"Subpackaging and interface packages is preferred over conditional modules via Requires.jl","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Requires.jl should be avoided at all costs. If an interface package exists, such as ChainRulesCore.jl for defining automatic differentiation rules without requiring a dependency on the whole ChainRules.jl system, or RecipesBase.jl which allows for defining Plots.jl plot recipes without a dependency on Plots.jl, a direct dependency on these interface packages is preferred.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Otherwise, instead of resorting to a conditional dependency using Requires.jl, it is preferred one creates subpackages, i.e. smaller independent packages kept within the same GitHub repository with independent versioning and package management. An example of this is seen in Optimization.jl which has subpackages like OptimizationBBO.jl for BlackBoxOptim.jl support.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Some important interface packages to know about are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"ChainRulesCore.jl\nRecipesBase.jl\nArrayInterface.jl\nCommonSolve.jl\nSciMLBase.jl","category":"page"},{"location":"developers/style/#Functions-should-either-attempt-to-be-non-allocating-and-reuse-caches,-or-treat-inputs-as-immutable","page":"Style Guide","title":"Functions should either attempt to be non-allocating and reuse caches, or treat inputs as immutable","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Mutating codes and non-mutating codes fall into different worlds. When a code is fully immutable, the compiler can better reason about dependencies, optimize the code, and check for correctness. However, many times a code making the fullest use of mutation can outperform even what the best compilers of today can generate. That said, the worst of all worlds is when code mixes mutation with non-mutating code. Not only is this a mishmash of coding styles, it has the potential non-locality and compiler proof issues of mutating code while not fully benefiting from the mutation.","category":"page"},{"location":"developers/style/#Out-Of-Place-and-Immutability-is-preferred-when-sufficient-performant","page":"Style Guide","title":"Out-Of-Place and Immutability is preferred when sufficient performant","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Mutation is used to get more performance by decreasing the amount of heap allocations. However, if it's not helpful for heap allocations in a given spot, do not use mutation. Mutation is scary and should be avoided unless it gives an immediate benefit. For example, if matrices are sufficiently large, then A*B is as fast as mul!(C,A,B), and thus writing A*B is preferred (unless the rest of the function is being careful about being fully non-allocating, in which case this should be mul! for consistency).","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Similarly, when defining types, using struct is preferred to mutable struct unless mutating the struct is a common occurrence. Even if mutating the struct is a common occurrence, see whether using Setfield.jl is sufficient. The compiler will optimize the construction of immutable structs, and thus this can be more efficient if it's not too much of a code hassle.","category":"page"},{"location":"developers/style/#Tests-should-attempt-to-cover-a-wide-gamut-of-input-types","page":"Style Guide","title":"Tests should attempt to cover a wide gamut of input types","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Code coverage numbers are meaningless if one does not consider the input types. For example, one can hit all the code with Array, but that does not test whether CuArray is compatible! Thus, it's always good to think of coverage not in terms of lines of code but in terms of type coverage. A good list of number types to think about are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Float64\nFloat32\nComplex\nDual\nBigFloat","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Array types to think about testing are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Array\nOffsetArray\nCuArray","category":"page"},{"location":"developers/style/#When-in-doubt,-a-submodule-should-become-a-subpackage-or-separate-package","page":"Style Guide","title":"When in doubt, a submodule should become a subpackage or separate package","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Keep packages to one core idea. If there's something separate enough to be a submodule, could it instead be a separate well-tested and documented package to be used by other packages? Most likely yes.","category":"page"},{"location":"developers/style/#Globals-should-be-avoided-whenever-possible","page":"Style Guide","title":"Globals should be avoided whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Global variables should be avoided whenever possible. When required, global variables should be constants and have an all uppercase name separated with underscores (e.g. MY_CONSTANT). They should be defined at the top of the file, immediately after imports and exports but before an __init__ function. If you truly want mutable global style behavior you may want to look into mutable containers.","category":"page"},{"location":"developers/style/#Type-stable-and-Type-grounded-code-is-preferred-wherever-possible","page":"Style Guide","title":"Type-stable and Type-grounded code is preferred wherever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Type-stable and type-grounded code helps the compiler create not only more optimized code, but also faster to compile code. Always keep containers well-typed, functions specializing on the appropriate arguments, and types concrete.","category":"page"},{"location":"developers/style/#Closures-should-be-avoided-whenever-possible","page":"Style Guide","title":"Closures should be avoided whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Closures can cause accidental type instabilities that are difficult to track down and debug; in the long run it saves time to always program defensively and avoid writing closures in the first place, even when a particular closure would not have been problematic. A similar argument applies to reading code with closures; if someone is looking for type instabilities, this is faster to do when code does not contain closures. Furthermore, if you want to update variables in an outer scope, do so explicitly with Refs or self defined structs. For example,","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"map(Base.Fix2(getindex, i), vector_of_vectors)","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"is preferred over","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"map(v -> v[i], vector_of_vectors)","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"or","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"[v[i] for v in vector_of_vectors]","category":"page"},{"location":"developers/style/#Numerical-functionality-should-use-the-appropriate-generic-numerical-interfaces","page":"Style Guide","title":"Numerical functionality should use the appropriate generic numerical interfaces","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"While you can use A\\b to do a linear solve inside a package, that does not mean that you should. This interface is only sufficient for performing factorizations, and so that limits the scaling choices, the types of A that can be supported, etc. Instead, linear solves within packages should use LinearSolve.jl. Similarly, nonlinear solves should use NonlinearSolve.jl. Optimization should use Optimization.jl. This allows the full generic choice to be given to the user without depending on every solver package (effectively recreating the generic interfaces within each package).","category":"page"},{"location":"developers/style/#Functions-should-capture-one-underlying-principle","page":"Style Guide","title":"Functions should capture one underlying principle","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Functions mean one thing. Every dispatch of + should be \"the meaning of addition on these types\". While in theory you could add dispatches to + that mean something different, that will fail in generic code for which + means addition. Thus, for generic code to work, code needs to adhere to one meaning for each function. Every dispatch should be an instantiation of that meaning.","category":"page"},{"location":"developers/style/#Internal-choices-should-be-exposed-as-options-whenever-possible","page":"Style Guide","title":"Internal choices should be exposed as options whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Whenever possible, numerical values and choices within scripts should be exposed as options to the user. This promotes code reusability beyond the few cases the author may have expected.","category":"page"},{"location":"developers/style/#Prefer-code-reuse-over-rewrites-whenever-possible","page":"Style Guide","title":"Prefer code reuse over rewrites whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If a package has a function you need, use the package. Add a dependency if you need to. If the function is missing a feature, prefer to add that feature to said package and then add it as a dependency. If the dependency is potentially troublesome, for example because it has a high load time, prefer to spend time helping said package fix these issues and add the dependency. Only when it does not seem possible to make the package \"good enough\" should using the package be abandoned. If it is abandoned, consider building a new package for this functionality as you need it, and then make it a dependency.","category":"page"},{"location":"developers/style/#Prefer-to-not-shadow-functions","page":"Style Guide","title":"Prefer to not shadow functions","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Two functions can have the same name in Julia by having different namespaces. For example, X.f and Y.f can be two different functions, with different dispatches, but the same name. This should be avoided whenever possible. Instead of creating MyPackage.sort, consider adding dispatches to Base.sort for your types if these new dispatches match the underlying principle of the function. If it doesn't, prefer to use a different name. While using MyPackage.sort is not conflicting, it is going to be confusing for most people unfamiliar with your code, so MyPackage.special_sort would be more helpful to newcomers reading the code.","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"CurrentModule = EquationsOfStateOfSolids\nDocTestSetup  = :(using EquationsOfStateOfSolids)","category":"page"},{"location":"api/collections/#Collections","page":"Collections","title":"Collections","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Pages = [\"collections.md\"]\nDepth = 3","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The current EquationOfStateOfSolidsParameters are","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"using TypeTree\ntt(EquationsOfStateOfSolids.EquationOfStateOfSolidsParameters)","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Here the leaves of the type tree are concrete types and can be constructed.","category":"page"},{"location":"api/collections/#Usage","page":"Collections","title":"Usage","text":"","category":"section"},{"location":"api/collections/#Construct-a-EquationOfStateOfSolidsParameters-instance","page":"Collections","title":"Construct a EquationOfStateOfSolidsParameters instance","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"We will use BirchMurnaghan3rd as an example.","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"A BirchMurnaghan3rd can be constructed from scratch, as shown above. It can also be constructed from an existing BirchMurnaghan3rd, with Setfield.jl @set! macro:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"using Setfield\neos = Murnaghan1st(1, 2, 3.0)\n@set! eos.v0 = 4\neos","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"To modify multiple fields (say, :v0, :bâ€²0, :bâ€³0, :e0) at a time, use @batchlens from Kaleido.jl:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"using Setfield, Kaleido\nlens = @batchlens(begin\n           _.v0\n           _.bâ€²0\n           _.bâ€³0\n           _.e0\n       end)\neos = BirchMurnaghan4th(1, 2.0, 3, 4)\nset(eos, lens, (5, 6, 7, 8))","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Users can access BirchMurnaghan3rd's elements by \"dot notation\":","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"eos = BirchMurnaghan3rd(1, 2, 3, 4.0)\neos.v0","category":"page"},{"location":"api/collections/#Evaluate-energy","page":"Collections","title":"Evaluate energy","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The E(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan:\nBirchMurnaghan2nd:\n\nBirchMurnaghan3rd:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nwhere x = V  V_0, and f = frac 1  2  bigg bigg( frac V_0  V  bigg)^23 - 1 bigg.\nBirchMurnaghan4th:\nE(V) = E_0+frac38 V_0 B_0 f^2leftleft(9 H-63 B_0^prime+143right) f^2+12left(B_0^prime-4right) f+12right\nwhere H = B_0 B_0 + (B_0)^2.\nPoirierTarantola2nd:\nE(V) = E_0+frac12 B_0 V_0 ln ^2 x\nPoirierTarantola3rd:\nE(V) = E_0+frac16 B_0 V_0 ln ^2 xleftleft(B_0^prime+2right) ln x+3right\nPoirierTarantola4th:\nE(V) = E_0+frac124 B_0 V_0 ln ^2 xleftleft(H+3 B_0^prime+3right) ln ^2 xright left+4left(B_0^prime+2right) ln x+12right\nwhere H = B_0 B_0 + (B_0)^2.\nVinet:\nE(V) = E_0+frac916 V_0 B_0 fracleft(x^2  3-1right)^2x^7  3leftx^1  3left(B_0^prime-4right)-xleft(B_0^prime-6right)right\nAntonSchmidt:\nE(V)=fracbeta V_0n+1left(fracVV_0right)^n+1leftln left(fracVV_0right)-frac1n+1right+E_infty","category":"page"},{"location":"api/collections/#Evaluate-pressure","page":"Collections","title":"Evaluate pressure","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The P(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan:\n1\nBirchMurnaghan2nd:\nP(V) = frac32 B_0left(x^-7  3-x^-5  3right)\nBirchMurnaghan3rd:\nP(V) = frac38 B_0 fracx^2  3-1x^10  3left3 B_0^prime x-16 x-3 x^1  3left(B_0^prime-4right)right\nBirchMurnaghan4th:\nP(V) = frac12 B_0(2 f+1)^5  2leftleft(9 H-63 B_0^prime+143right) f^2rightleft+9left(B_0^prime-4right) f+6right\nPoirierTarantola2nd:\nP(V) = -fracB_0x ln x\nPoirierTarantola3rd:\nP(V) = -fracB_0 ln x2 xleftleft(B_0^prime+2right) ln x+2right\nPoirierTarantola4th:\nP(V) = -fracB_0 ln x6 xleftleft(H+3 B_0^prime+3right) ln ^2 x+3left(B_0^prime+6right) ln x+6right\nVinet:\nP(V) = 3 B_0 frac1-etaeta^2 exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nP(V) = -betaleft(fracVV_0right)^n ln left(fracVV_0right)","category":"page"},{"location":"api/collections/#Evaluate-bulk-modulus","page":"Collections","title":"Evaluate bulk modulus","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"The B(V) relation of equations of state are listed as below:","category":"page"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"BirchMurnaghan2nd:\nB(V) = B_0(7 f+1)(2 f+1)^5  2\nBirchMurnaghan3rd:\nB(V) = B_0(2 f+1)^5  2 left 1 + (3B_0^prime - 5) f + frac 27  2 (B_0^prime - 4) f^2 right\nBirchMurnaghan4th:\nB(V) = frac16 B_0(2 f+1)^5  2leftleft(99 H-693 B_0^prime+1573right) f^3rightleft+left(27 H-108 B_0^prime+105right) f^2+6left(3 B_0^prime-5right) f+6right\nPoirierTarantola2nd:\nB(V) = fracB_0x(1-ln x)\nPoirierTarantola3rd:\nB(V) = -fracB_02 xleftleft(B_0^prime+2right) ln x(ln x-1)-2right\nPoirierTarantola4th:\nB(V) = -fracB_06 xleftleft(H+3 B_0^prime+3right) ln ^3 x-3left(H+2 B_0^prime+1right) ln ^2 xrightleft-6left(B_0^prime+1right) ln x-6right\nVinet:\nB(V) = -fracB_02 eta^2left3 eta(eta-1)left(B_0^prime-1right)+2(eta-2)righttimes exp left-frac32left(B_0^prime-1right)(eta-1)right\nAntonSchmidt:\nB(V) = betaleft(fracVV_0right)^nleft1+n ln fracVV_0right","category":"page"},{"location":"api/collections/#Public-interfaces","page":"Collections","title":"Public interfaces","text":"","category":"section"},{"location":"api/collections/","page":"Collections","title":"Collections","text":"Murnaghan1st\nBirchMurnaghan\nBirchMurnaghan2nd\nBirchMurnaghan3rd\nBirchMurnaghan4th\nPoirierTarantola\nPoirierTarantola2nd\nPoirierTarantola3rd\nVinet\nEnergyEquation\nPressureEquation\nBulkModulusEquation\ngetparam\norderof\nreal\nisreal\nfloat\nustrip","category":"page"},{"location":"api/collections/#EquationsOfStateOfSolids.Murnaghan1st","page":"Collections","title":"EquationsOfStateOfSolids.Murnaghan1st","text":"Murnaghan1st(v0, b0, bâ€²0, e0=zero(v0 * b0))\n\nCreate a Murnaghan first order equation of state.\n\nThe energy and pressure equations are:\n\nbeginalign*\n    E(V) = E_0+B_0 V_0leftfrac1B_0left(B_0-1right)left(fracVV_0right)^1-B_0+fracVB_0 V_0-frac1B_0-1right\n    P(V) = fracB_0B_0leftleft(fracV_0Vright)^B_0-1right\nendalign*\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbâ€²0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.BirchMurnaghan","page":"Collections","title":"EquationsOfStateOfSolids.BirchMurnaghan","text":"BirchMurnaghan(args...)\n\nConstruct a BirchMurnaghan based on the length of arguments, where e0 must be provided.\n\nSee also: BirchMurnaghan2nd, BirchMurnaghan3rd, BirchMurnaghan4th\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.BirchMurnaghan2nd","page":"Collections","title":"EquationsOfStateOfSolids.BirchMurnaghan2nd","text":"BirchMurnaghan2nd(v0, b0, e0=zero(v0 * b0))\n\nCreate a Birchâ€“Murnaghan second order equation of state.\n\nThe energy, pressure, and bulk modulus equations are:\n\nbeginalign*\n    E(V) = E_0 + frac98 B_0 V_0 left(left( V  V_0 right)^-2  3-1right)^2\n    P(V) = frac32 B_0left(x^-7  3-x^-5  3right)\n    B(V) = B_0(7f+1)(2f+1)^5  2\nendalign*\n\nwhere x = V  V_0, and f = frac 1  2  bigg Big( frac V_0  V  Big)^23 - 1 bigg.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.BirchMurnaghan3rd","page":"Collections","title":"EquationsOfStateOfSolids.BirchMurnaghan3rd","text":"BirchMurnaghan3rd(v0, b0, bâ€²0, e0=zero(v0 * b0))\n\nCreate a Birchâ€“Murnaghan third order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbâ€²0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\nnote: Note\nThe third-order equation (Equation (22)) becomes identical to the second-order equation when b0 = 4 (not 0!).\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.BirchMurnaghan4th","page":"Collections","title":"EquationsOfStateOfSolids.BirchMurnaghan4th","text":"BirchMurnaghan4th(v0, b0, bâ€²0, bâ€³0, e0=zero(v0 * b0))\n\nCreate a Birchâ€“Murnaghan fourth order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbâ€²0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\nbâ€³0: the second-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\nnote: Note\nThe fourth-order equation becomes identical to the third-order equation whenB_0 = -frac 1  9B_0  (9B_0^2 - 63B_0 + 143)\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.PoirierTarantola","page":"Collections","title":"EquationsOfStateOfSolids.PoirierTarantola","text":"PoirierTarantola(args...)\n\nConstruct a PoirierTarantola based on the length of arguments, where e0 must be provided.\n\nSee also: PoirierTarantola2nd, PoirierTarantola3rd, PoirierTarantola4th\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.PoirierTarantola2nd","page":"Collections","title":"EquationsOfStateOfSolids.PoirierTarantola2nd","text":"PoirierTarantola2nd(v0, b0, e0=zero(v0 * b0))\n\nCreate a Poirierâ€“Tarantola second order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.PoirierTarantola3rd","page":"Collections","title":"EquationsOfStateOfSolids.PoirierTarantola3rd","text":"PoirierTarantola3rd(v0, b0, bâ€²0, e0=zero(v0 * b0))\n\nCreate a Poirierâ€“Tarantola third order equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbâ€²0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.Vinet","page":"Collections","title":"EquationsOfStateOfSolids.Vinet","text":"Vinet(v0, b0, bâ€²0, e0=zero(v0 * b0))\n\nCreate a Vinet equation of state.\n\nThis equation of state can have units. The units are specified in Unitful.jl's @u_str style.\n\nArguments\n\nv0: the volume of solid at zero pressure.\nb0: the bulk modulus of solid at zero pressure.\nbâ€²0: the first-order pressure-derivative bulk modulus of solid at zero pressure.\ne0: the energy of solid at zero pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.EnergyEquation","page":"Collections","title":"EquationsOfStateOfSolids.EnergyEquation","text":"EnergyEquation{T} <: EquationOfStateOfSolids{T}\nEnergyEquation(parameters::Parameters)\n\nConstruct an equation of state which evaluates the energy of the given parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.PressureEquation","page":"Collections","title":"EquationsOfStateOfSolids.PressureEquation","text":"PressureEquation{T} <: EquationOfStateOfSolids{T}\nPressureEquation(parameters::Parameters)\n\nConstruct an equation of state which evaluates the pressure of the given parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.BulkModulusEquation","page":"Collections","title":"EquationsOfStateOfSolids.BulkModulusEquation","text":"BulkModulusEquation{T} <: EquationOfStateOfSolids{T}\nBulkModulusEquation(parameters::Parameters)\n\nConstruct an equation of state which evaluates the bulk modulus of the given parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/collections/#EquationsOfStateOfSolids.getparam","page":"Collections","title":"EquationsOfStateOfSolids.getparam","text":"getparam(eos::EquationOfStateOfSolids)\n\nGet the Parameters from an EquationOfStateOfSolids.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#EquationsOfStateOfSolids.orderof","page":"Collections","title":"EquationsOfStateOfSolids.orderof","text":"orderof(x::FiniteStrainParameters)\n\nReturn the order of a FiniteStrainParameters.\n\nExamples\n\njulia> orderof(BirchMurnaghan(40, 0.5, 4, 0)) == 3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#Base.real","page":"Collections","title":"Base.real","text":"real(p::Parameters)\n\nConstruct a real Parameters from the real parts of the elements of p.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#Base.isreal","page":"Collections","title":"Base.isreal","text":"isreal(p::Parameters)\n\nTest whether all p's elements are numerically equal to some real number.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#Base.float","page":"Collections","title":"Base.float","text":"float(p::Parameters)\n\nConvert all elements of a Parameters to floating point data types.\n\n\n\n\n\n","category":"function"},{"location":"api/collections/#Unitful.ustrip","page":"Collections","title":"Unitful.ustrip","text":"ustrip(p::Parameters)\n\nStrip units from a Parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/finitestrains/","page":"Finite strains","title":"Finite strains","text":"CurrentModule = EquationsOfStateOfSolids.FiniteStrains\nDocTestSetup = quote\n    using EquationsOfStateOfSolids.FiniteStrains: ToEulerianStrain, FromEulerianStrain\n    using Unitful: @u_str\nend","category":"page"},{"location":"api/finitestrains/#Finite-strains","page":"Finite strains","title":"Finite strains","text":"","category":"section"},{"location":"api/finitestrains/","page":"Finite strains","title":"Finite strains","text":"This module contains some methods to calculate several finite strains. The following formulae are from the Gibbs2 paper Table 3.","category":"page"},{"location":"api/finitestrains/","page":"Finite strains","title":"Finite strains","text":"Eulerian strain:\nf = frac 1  2  bigg( Big frac V_0  V  Big^frac 2  3  - 1 bigg)\nLagrangian strain:\nf = frac 1  2  bigg( Big( frac V  V_0  Big^frac 2  3  - 1 bigg)\nNatural (Hencky) strain:\nf = frac 1  3  ln Big frac V  V_0  Big\nInfinitesimal strain:\nf = 1 - Big frac V_0  V  Big^frac 1  3 ","category":"page"},{"location":"api/finitestrains/","page":"Finite strains","title":"Finite strains","text":"To\nFrom","category":"page"},{"location":"api/finitestrains/#EquationsOfStateOfSolids.FiniteStrains.To","page":"Finite strains","title":"EquationsOfStateOfSolids.FiniteStrains.To","text":"ToEulerianStrain(v0)\nToLagrangianStrain(v0)\nToNaturalStrain(v0)\nToInfinitesimalStrain(v0)\n\nCalculate the finite strain of v based on the reference volume v0.\n\nExamples\n\njulia> f = ToEulerianStrain(10);\n\njulia> f(9)\n0.036382991447572066\n\njulia> f = ToEulerianStrain(100u\"nm^3\");\n\njulia> f(90u\"nm^3\")\n0.036382991447572066\n\njulia> g = inv(f);\n\njulia> g âˆ˜ f == f âˆ˜ g == identity\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/finitestrains/#EquationsOfStateOfSolids.FiniteStrains.From","page":"Finite strains","title":"EquationsOfStateOfSolids.FiniteStrains.From","text":"FromEulerianStrain(v0)\nFromLagrangianStrain(v0)\nFromNaturalStrain(v0)\nFromInfinitesimalStrain(v0)\n\nCalculate the original volume v from the finite strain f based on the reference volume v0.\n\nExamples\n\njulia> g = FromEulerianStrain(10);\n\njulia> g(0.036382991447572066)\n9.000000000000002\n\njulia> g = FromEulerianStrain(100u\"nm^3\");\n\njulia> g(0.036382991447572066)\n90.00000000000001 nmÂ³\n\njulia> f = inv(g);\n\njulia> f âˆ˜ g == g âˆ˜ f == identity\ntrue\n\n\n\n\n\n","category":"type"},{"location":"interoperability/#How-to-use-EquationsOfStateOfSolids-in-Python?","page":"Interoperability","title":"How to use EquationsOfStateOfSolids in Python?","text":"","category":"section"},{"location":"interoperability/","page":"Interoperability","title":"Interoperability","text":"It may be attempting for Pythonistas to use this package in Python, without writing too much code. Luckily, Julia provides such a feature.","category":"page"},{"location":"interoperability/","page":"Interoperability","title":"Interoperability","text":"First, install PyCall.jl, following their instructions. Notice on macOS, that if you want to install Python from pyenv, you may need to run\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.6.9\nin terminal to install your python, or else Julia will throw an\nImportError: No module named site\nSee this issue and another issue for details.\nInstall PyJulia in Python. Please see its official tutorial for instructions.\nOpen a Python (an IPython) session, start playing!\nIn [1]: from julia import Unitful\n\nIn [2]: from julia.EquationsOfStateOfSolids import *\n\nIn [3]: from julia.EquationsOfStateOfSolids.Fitting import *\n\nIn [4]: Murnaghan(1, 2, 3.0, 4)\nOut[4]: <PyCall.jlwrap EquationsOfStateOfSolids.Murnaghan1st{Float64}(1.0, 2.0, 3.0, 4.0)>\n\nIn [5]: result = nonlinfit(\n   ...:     PressureEquation(BirchMurnaghan3rd(1, 2, 3.0, 0)),\n   ...:     [1, 2, 3, 4, 5],\n   ...:     [5, 6, 9, 8, 7],\n   ...: )\n\nIn [6]: result.v0, result.b0, result.bâ€²0\nOut[6]: (1.1024687826913997, 29.308616965851673, 12.689089874230556)\n\nIn [7]: from julia import Main\n\nIn [8]: volumes = Main.eval(\"data[:, 1] .* u\\\"bohr^3\\\"\")\n\nIn [9]: energies = Main.eval(\"data[:, 2] .* u\\\"Ry\\\"\")\nwhere data is copied from Julia:\nIn [1]: data = Main.eval(\"\"\"\n   ...:    [\n   ...:        159.9086 -323.4078898\n                   â‹®          â‹®\n   ...:        319.8173 -323.4105393\n   ...:    ]\n   ...:    \"\"\"\n   ...: )","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page collects some possible errors you may encounter and trick how to fix them. If you have some questions about how to use this code, you are welcome to discuss with us.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you have additional tips, please either report an issue or submit a PR with suggestions.","category":"page"},{"location":"troubleshooting/#Installation-problems","page":"Troubleshooting","title":"Installation problems","text":"","category":"section"},{"location":"troubleshooting/#I-cannot-find-the-julia-executable","page":"Troubleshooting","title":"I cannot find the julia executable","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have Julia installed in your environment. Please download the latest stable version for your platform. If you are using a *nix system, the recommended way is to use juliaup. If you do not want to install juliaup or you are using other platforms that Julia supports, download the corresponding binaries. Then, create a symbolic link to the Julia executable. If the path is not in your $PATH environment variable, export it to your $PATH.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Some clusters, like Habanero, Comet, or Expanse, already have Julia installed as a module, you may just module load julia to use it. If not, either install by yourself or contact your administrator.","category":"page"},{"location":"troubleshooting/#Loading-EquationsOfStateOfSolids","page":"Troubleshooting","title":"Loading EquationsOfStateOfSolids","text":"","category":"section"},{"location":"troubleshooting/#Why-is-Julia-compiling/loading-modules-so-slow?-What-can-I-do?","page":"Troubleshooting","title":"Why is Julia compiling/loading modules so slow? What can I do?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"First, we recommend you download the latest version of Julia. Usually, the newest version has the best performance.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you just want Julia to do a simple task and only once, you could start the Julia REPL with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --compile=min","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize compilation or","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --optimize=0","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize optimizations, or just use both. Or you could make a system image and run with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --sysimage custom-image.so","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Fredrik Ekre's talk for details.","category":"page"},{"location":"troubleshooting/#How-to-make-a-Vector-from-a-Parameters?","page":"Troubleshooting","title":"How to make a Vector from a Parameters?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"A suggested way is to use the IterTools.fieldvalues function:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using IterTools\neos = BirchMurnaghan4th(1, 2.0, 3, 4)\ncollect(fieldvalues(eos))","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"It is lazy and fast.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Or, write a non-lazy version of fieldvalues manually:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"fieldvalues(eos::EquationOfState) = [getfield(eos, i) for i in 1:nfields(eos)]\nfieldvalues(eos)","category":"page"},{"location":"troubleshooting/#linfit-does-not-work-with-BigFloat?","page":"Troubleshooting","title":"linfit does not work with BigFloat?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"LinearAlgebra does not support SVD for matrices with BigFloat elements by default. You need to install GenericSVD.jl first and then using GenericSVD. Then it should work.","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"CurrentModule = EquationsOfStateOfSolids.Fitting","category":"page"},{"location":"api/fitting/#Fitting","page":"Fitting","title":"Fitting","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"Pages = [\"fitting.md\"]","category":"page"},{"location":"api/fitting/#Nonlinear-fitting","page":"Fitting","title":"Nonlinear fitting","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"The equations of state depend nonlinearly on a collection of parameters, E_0, V_0, B_0, B_0, ..., that represent physical properties of the solid at equilibrium and can, in principle, be obtained experimentally by independent methods. The use of a given analytical EOS may have significant influence on the results obtained, particularly because the parameters are far from being independent. The number of parameters has to be considered in comparing the goodness of fit of functional forms with different analytical flexibility. The possibility of using too many parameters, beyond what is physically justified by the information contained in the experimental data, is a serious aspect that deserves consideration.[1]","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"In EquationsOfStateOfSolids, the nonlinear fitting is currently implemented by LsqFit, a small library that provides basic least-squares fitting in pure Julia. It only utilizes the Levenbergâ€“Marquardt algorithm for non-linear fitting. See its documentation for more information.","category":"page"},{"location":"api/fitting/#Linear-fitting","page":"Fitting","title":"Linear fitting","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"The linear fitting","category":"page"},{"location":"api/fitting/#Usage","page":"Fitting","title":"Usage","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"using EquationsOfStateOfSolids\nusing EquationsOfStateOfSolids.Fitting\n\nvolumes = [\n    25.987454833,\n    26.9045702104,\n    27.8430241908,\n    28.8029649591,\n    29.7848370694,\n    30.7887887064,\n    31.814968055,\n    32.8638196693,\n    33.9353435494,\n    35.0299842495,\n    36.1477417695,\n    37.2892088485,\n    38.4543854865,\n    39.6437162376,\n    40.857201102,\n    42.095136449,\n    43.3579668329,\n    44.6456922537,\n    45.9587572656,\n    47.2973100535,\n    48.6614988019,\n    50.0517680652,\n    51.4682660281,\n    52.9112890601,\n    54.3808371612,\n    55.8775030703,\n    57.4014349722,\n    58.9526328669,\n];\nenergies = [\n    -7.63622156576,\n    -8.16831294894,\n    -8.63871612686,\n    -9.05181213218,\n    -9.41170988374,\n    -9.72238224345,\n    -9.98744832526,\n    -10.210309552,\n    -10.3943401353,\n    -10.5427238068,\n    -10.6584266073,\n    -10.7442240979,\n    -10.8027285713,\n    -10.8363890521,\n    -10.8474912964,\n    -10.838157792,\n    -10.8103477586,\n    -10.7659387815,\n    -10.7066179666,\n    -10.6339907853,\n    -10.5495538639,\n    -10.4546677714,\n    -10.3506386542,\n    -10.2386366017,\n    -10.1197772808,\n    -9.99504030111,\n    -9.86535084973,\n    -9.73155247952,\n];\n\nnonlinfit(EnergyEquation(BirchMurnaghan3rd(40, 0.5, 4)), volumes, energies)\n\nnonlinfit(EnergyEquation(Murnaghan(41, 0.5, 4)), volumes, energies)\n\nnonlinfit(EnergyEquation(PoirierTarantola3rd(41, 0.5, 4)), volumes, energies)\n\nnonlinfit(EnergyEquation(Vinet(41, 0.5, 4)), volumes, energies)","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"Then 4 different equations of state will be fitted.","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"They just work as well with units:","category":"page"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"using Unitful\n\nvolumes = volumes * u\"angstrom^3\"\nenergies = energies * u\"eV\"\n\nnonlinfit(EnergyEquation(BirchMurnaghan3rd(40u\"angstrom^3\", 1u\"GPa\", 4)), volumes, energies)","category":"page"},{"location":"api/fitting/#Public-interfaces","page":"Fitting","title":"Public interfaces","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"fiteos\nlinfit\nnonlinfit","category":"page"},{"location":"api/fitting/#EquationsOfStateOfSolids.Fitting.fiteos","page":"Fitting","title":"EquationsOfStateOfSolids.Fitting.fiteos","text":"fiteos(volumes, energies, initial_params::FiniteStrainParameters, LinearFitting(); kwargs...)\n\nFit an equation of state E(V) using linear algorithms.\n\nArguments\n\nmaxiter::Integer=1000: .\nconv_thr::AbstractFloat=1e-12: .\nroot_thr::AbstractFloat=1e-20: .\nverbose::Bool=false: .\n\nnote: Note\nIf you want to fit with BigFloat data, you need to install GenericSVD.jl and using GenericSVD before fittting!\n\n\n\n\n\nfiteos(xs, ys, initial_params::Parameters, NonLinearFitting(); kwargs...)\n\nFit an equation of state E(V) using nonlinear algorithms.\n\nArguments\n\nxtol::AbstractFloat=1e-16: .\ngtol::AbstractFloat=1e-16: .\nmaxiter::Integer=1000: .\nmin_step_quality::AbstractFloat=1e-16: .\ngood_step_quality::AbstractFloat=0.75: .\nverbose::Bool=false: .\n\n\n\n\n\n","category":"function"},{"location":"api/fitting/#EquationsOfStateOfSolids.Fitting.linfit","page":"Fitting","title":"EquationsOfStateOfSolids.Fitting.linfit","text":"linfit(eos::EnergyEquation, volumes, energies; kwargs...)\n\nA wrapper for fiteos with linear fitting method.\n\nArguments\n\nmaxiter::Integer=1000: .\nconv_thr::AbstractFloat=1e-12: .\nroot_thr::AbstractFloat=1e-20: .\nverbose::Bool=false: .\n\n\n\n\n\n","category":"function"},{"location":"api/fitting/#EquationsOfStateOfSolids.Fitting.nonlinfit","page":"Fitting","title":"EquationsOfStateOfSolids.Fitting.nonlinfit","text":"nonlinfit(eos::EnergyEquation, volumes, energies; kwargs...)\n\nA wrapper for fiteos with nonlinear fitting method.\n\nArguments\n\nxtol::AbstractFloat=1e-16: .\ngtol::AbstractFloat=1e-16: .\nmaxiter::Integer=1000: .\nmin_step_quality::AbstractFloat=1e-16: .\ngood_step_quality::AbstractFloat=0.75: .\nverbose::Bool=false: .\n\n\n\n\n\n","category":"function"},{"location":"api/fitting/#References","page":"Fitting","title":"References","text":"","category":"section"},{"location":"api/fitting/","page":"Fitting","title":"Fitting","text":"A. Otero-De-La-Roza, V. LuaÃ±a, Comput. Phys. Commun. 182, 1708â€“1720 (2011).","category":"page"},{"location":"developers/contributing/#contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Welcome! This document explains some ways you can contribute to EquationsOfStateOfSolids.","category":"page"},{"location":"developers/contributing/#Code-of-conduct","page":"Contributing","title":"Code of conduct","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"This project and everyone participating in it is governed by the \"Contributor Covenant Code of Conduct\". By participating, you are expected to uphold this code.","category":"page"},{"location":"developers/contributing/#Join-the-community-forum","page":"Contributing","title":"Join the community forum","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"First up, join the community forum.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The forum is a good place to ask questions about how to use EquationsOfStateOfSolids. You can also use the forum to discuss possible feature requests and bugs before raising a GitHub issue (more on this below).","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Aside from asking questions, the easiest way you can contribute to EquationsOfStateOfSolids is to help answer questions on the forum!","category":"page"},{"location":"developers/contributing/#Improve-the-documentation","page":"Contributing","title":"Improve the documentation","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Chances are, if you asked (or answered) a question on the community forum, then it is a sign that the documentation could be improved. Moreover, since it is your question, you are probably the best-placed person to improve it!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The docs are written in Markdown and are built using Documenter.jl. You can find the source of all the docs here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is small (like fixing typos, or one or two sentence corrections), the easiest way to do this is via GitHub's online editor. (GitHub has help on how to do this.)","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is larger, or touches multiple files, you will need to make the change locally and then use Git to submit a pull request. (See Contribute code to EquationsOfStateOfSolids below for more on this.)","category":"page"},{"location":"developers/contributing/#File-a-bug-report","page":"Contributing","title":"File a bug report","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Another way to contribute to EquationsOfStateOfSolids is to file bug reports.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you read the info in the box where you write the body of the issue before posting. You can also find a copy of that info here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're unsure whether you have a real bug, post on the community forum first. Someone will either help you fix the problem, or let you know the most appropriate place to open a bug report.","category":"page"},{"location":"developers/contributing/#Contribute-code-to-EquationsOfStateOfSolids","page":"Contributing","title":"Contribute code to EquationsOfStateOfSolids","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Finally, you can also contribute code to EquationsOfStateOfSolids!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nIf you do not have experience with Git, GitHub, and Julia development, the first steps can be a little daunting. However, there are lots of tutorials available online, including:GitHub\nGit and GitHub\nGit\nJulia package development","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you are familiar with Git and GitHub, the workflow for contributing code to EquationsOfStateOfSolids is similar to the following:","category":"page"},{"location":"developers/contributing/#Step-1:-decide-what-to-work-on","page":"Contributing","title":"Step 1: decide what to work on","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The first step is to find an open issue (or open a new one) for the problem you want to solve. Then, before spending too much time on it, discuss what you are planning to do in the issue to see if other contributors are fine with your proposed changes. Getting feedback early can improve code quality, and avoid time spent writing code that does not get merged into EquationsOfStateOfSolids.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nAt this point, remember to be patient and polite; you may get a lot of comments on your issue! However, do not be afraid! Comments mean that people are willing to help you improve the code that you are contributing to EquationsOfStateOfSolids.","category":"page"},{"location":"developers/contributing/#Step-2:-fork-EquationsOfStateOfSolids","page":"Contributing","title":"Step 2: fork EquationsOfStateOfSolids","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to https://github.com/MineralsCloud/EquationsOfStateOfSolids.jl and click the \"Fork\" button in the top-right corner. This will create a copy of EquationsOfStateOfSolids under your GitHub account.","category":"page"},{"location":"developers/contributing/#Step-3:-install-EquationsOfStateOfSolids-locally","page":"Contributing","title":"Step 3: install EquationsOfStateOfSolids locally","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Similar to installation, open the Julia REPL and run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.update()\nPkg.develop(\"EquationsOfStateOfSolids\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then the package will be cloned to your local machine. On *nix systems, the default path is ~/.julia/dev/EquationsOfStateOfSolids unless you modify the JULIA_DEPOT_PATH environment variable. If you're on Windows, this will be C:\\\\Users\\\\<my_name>\\\\.julia\\\\dev\\\\EquationsOfStateOfSolids. In the following text, we will call it PKGROOT.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to PKGROOT, start a new Julia session and run","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"to instantiate the project.","category":"page"},{"location":"developers/contributing/#Step-4:-checkout-a-new-branch","page":"Contributing","title":"Step 4: checkout a new branch","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn the following, replace any instance of GITHUB_ACCOUNT with your GitHub username.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The next step is to checkout a development branch. In a terminal (or command prompt on Windows), run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/EquationsOfStateOfSolids\n\ngit remote add GITHUB_ACCOUNT https://github.com/GITHUB_ACCOUNT/EquationsOfStateOfSolids.jl.git\n\ngit checkout master  # or main\n\ngit pull\n\ngit checkout -b my_new_branch","category":"page"},{"location":"developers/contributing/#Step-5:-make-changes","page":"Contributing","title":"Step 5: make changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Now make any changes to the source code inside the ~/.julia/dev/EquationsOfStateOfSolids directory.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Follow the Style guide and run JuliaFormatter.jl\nAdd tests and documentation for any changes or new features","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nWhen you change the source code, you'll need to restart Julia for the changes to take effect. This is a pain, so install Revise.jl.","category":"page"},{"location":"developers/contributing/#Step-6a:-test-your-code-changes","page":"Contributing","title":"Step 6a: test your code changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To test that your changes work, run the EquationsOfStateOfSolids test-suite by opening Julia and running:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/EquationsOfStateOfSolids\")\nusing Pkg\nPkg.activate(\".\")\nPkg.test()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nRunning the tests might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're using Revise.jl, you can also run the tests by calling include:include(\"test/runtests.jl\")This can be faster if you want to re-run the tests multiple times.","category":"page"},{"location":"developers/contributing/#Step-6b:-test-your-documentation-changes","page":"Contributing","title":"Step 6b: test your documentation changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Open Julia, then run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/EquationsOfStateOfSolids/docs\")\nusing Pkg\nPkg.activate(\".\")\ninclude(\"src/make.jl\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"After a while, a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser, and have fun!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nBuilding the documentation might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf there's a problem with the tests that you don't know how to fix, don't worry. Continue to step 5, and one of the EquationsOfStateOfSolids contributors will comment on your pull request telling you how to fix things.","category":"page"},{"location":"developers/contributing/#Step-7:-make-a-pull-request","page":"Contributing","title":"Step 7: make a pull request","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you've made changes, you're ready to push the changes to GitHub. Run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/EquationsOfStateOfSolids\n\ngit add .\n\ngit commit -m \"A descriptive message of the changes\"\n\ngit push -u GITHUB_ACCOUNT my_new_branch","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then go to https://github.com/MineralsCloud/EquationsOfStateOfSolids.jl/pulls and follow the instructions that pop up to open a pull request.","category":"page"},{"location":"developers/contributing/#Step-8:-respond-to-comments","page":"Contributing","title":"Step 8: respond to comments","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"At this point, remember to be patient and polite; you may get a lot of comments on your pull request! However, do not be afraid! A lot of comments means that people are willing to help you improve the code that you are contributing to EquationsOfStateOfSolids.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To respond to the comments, go back to step 5, make any changes, test the changes in step 6, and then make a new commit in step 7. Your PR will automatically update.","category":"page"},{"location":"developers/contributing/#Step-9:-cleaning-up","page":"Contributing","title":"Step 9: cleaning up","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once the PR is merged, clean-up your Git repository ready for the next contribution!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/EquationsOfStateOfSolids\n\ngit checkout master\n\ngit pull","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIf you have suggestions to improve this guide, please make a pull request! It's particularly helpful if you do this after your first pull request because you'll know all the parts that could be explained better.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Thanks for contributing to EquationsOfStateOfSolids!","category":"page"},{"location":"plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Package EquationOfStateRecipes.jl provides some default themes for plotting an EquationOfStateOfSolids. First, try to install the Plots.jl package by","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using Pkg\nPkg.add(\"Plots\")","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Then install EquationOfStateRecipes.jl with","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Pkg.add(\"EquationOfStateRecipes\")","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Finally, load EquationsOfStateOfSolids.jl and plot:","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using EquationsOfStateOfSolids, Plots, EquationOfStateRecipes, Unitful, UnitfulAtomic\neos = EnergyEquation(Murnaghan1st(224.501825u\"bohr^3\", 8.896845u\"GPa\", 3.723835, -323.417686u\"Ry\"))\nplot(eos)\nplot!(eos, (0.8:0.01:1.2) * eos.param.v0)\nscatter!(eos, (0.5:0.1:1) * eos.param.v0)\nsavefig(\"plot.svg\"); nothing # hide","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EquationsOfStateOfSolids","category":"page"},{"location":"#EquationsOfStateOfSolids","page":"Home","title":"EquationsOfStateOfSolids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EquationsOfStateOfSolids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code is hosted on GitHub, with some continuous integration services to test its validity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is created and maintained by @singularitti. You are very welcome to contribute.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements some equations of state (EOS) of solids which are useful in research. It currently includes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Murnaghan1st EOS\nBirchâ€“Murnaghan EOS family:\nBirchMurnaghan2nd\nBirchMurnaghan3rd\nBirchMurnaghan4th\nVinet EOS\nPoirierâ€“Tarantola EOS family:\nPoirierTarantola2nd\nPoirierTarantola3rd","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formulae are referenced from Ref. 1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package also includes linear and nonlinear fitting methods, which are also referenced from Ref. 1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calculate the energy, pressure, and bulk modulus of an EquationOfStateOfSolid on a volume (an array of volumes).\nFit an EquationOfStateOfSolid on a series of E(V) data using the least-squares fitting method or a linear fitting method.\nFind the corresponding volume of energy, or pressure, given an EquationOfStateOfSolid.\nHandle unit conversion automatically in the above features.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The old EquationsOfState.jl package has been superseded by EquationsOfStateOfSolids.jl. So please just use EquationsOfStateOfSolids.jl.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A. Otero-De-La-Roza, V. LuaÃ±a, Comput. Phys. Commun. 182, 1708â€“1720 (2011).\nR. J. Angel, M. Alvaro, J. Gonzalez-Platas, Zeitschrift FÃ¼r Kristallographie - Cryst Mater. 229, 405â€“419 (2014).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add EquationsOfStateOfSolids","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"EquationsOfStateOfSolids\")","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"STABLE â€” documentation of the most recently tagged version.\nDEV â€” documentation of the in-development version.","category":"page"},{"location":"#Project-status","page":"Home","title":"Project status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is tested against, and being developed for, Julia 1.6 and above on Linux, macOS, and Windows.","category":"page"},{"location":"#Questions-and-contributions","page":"Home","title":"Questions and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usage questions can be posted on our discussion page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome, as are feature requests and suggestions. Please open an issue if you encounter any problems. The contributing page has a few guidelines that should be followed when opening pull requests and contributing code.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"plotting.md\",\n    \"interoperability.md\",\n    \"portability.md\",\n    \"developers/contributing.md\",\n    \"developers/style.md\",\n    \"troubleshooting.md\",\n]\nDepth = 3","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/collections.md\",\n    \"api/finitestrains.md\",\n    \"api/fitting.md\",\n]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/collections.md\",\n    \"api/finitestrains.md\",\n    \"api/fitting.md\",\n]","category":"page"}]
}
